<?php

namespace Tests\Feature\Support;

use App\Models\SupportTicket;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;
use Tests\TestCase;

class SupportTicketReopenTest extends TestCase
{
    use RefreshDatabase;

    public function test_ticket_owner_can_reopen_closed_ticket(): void
    {
        Carbon::setTestNow('2025-02-15 15:00:00');

        $user = User::factory()->create();
        $agent = User::factory()->create();

        $ticket = SupportTicket::create([
            'user_id' => $user->id,
            'subject' => 'Need more help',
            'body' => 'The problem came back.',
            'status' => 'closed',
            'priority' => 'medium',
            'resolved_at' => Carbon::now()->subDay(),
            'resolved_by' => $agent->id,
            'customer_satisfaction_rating' => 2,
        ]);

        $response = $this
            ->actingAs($user)
            ->from(route('support.tickets.show', $ticket))
            ->patch(route('support.tickets.reopen', $ticket));

        $response->assertRedirect(route('support.tickets.show', $ticket));
        $response->assertSessionHas('success', 'Ticket reopened. We will take another look.');

        $freshTicket = $ticket->fresh();

        $this->assertSame('open', $freshTicket->status);
        $this->assertNull($freshTicket->resolved_at);
        $this->assertNull($freshTicket->resolved_by);
        $this->assertNull($freshTicket->customer_satisfaction_rating);

        Carbon::setTestNow();
    }

    public function test_ticket_owner_cannot_reopen_active_ticket(): void
    {
        $user = User::factory()->create();

        $ticket = SupportTicket::create([
            'user_id' => $user->id,
            'subject' => 'Still in progress',
            'body' => 'Waiting for an update.',
            'status' => 'open',
            'priority' => 'high',
        ]);

        $response = $this
            ->actingAs($user)
            ->from(route('support.tickets.show', $ticket))
            ->patch(route('support.tickets.reopen', $ticket));

        $response->assertRedirect(route('support.tickets.show', $ticket));
        $response->assertSessionHas('info', 'This ticket is already open.');
    }

    public function test_non_owner_cannot_reopen_ticket(): void
    {
        $user = User::factory()->create();
        $otherUser = User::factory()->create();

        $ticket = SupportTicket::create([
            'user_id' => $otherUser->id,
            'subject' => 'Closed elsewhere',
            'body' => 'Should remain closed.',
            'status' => 'closed',
            'priority' => 'low',
        ]);

        $response = $this
            ->actingAs($user)
            ->patch(route('support.tickets.reopen', $ticket));

        $response->assertForbidden();
    }
}
